{"version":3,"sources":["util/Helpers.js","config.js","util/Foursquare.js","components/Place/Place.js","components/PlacesList/PlacesList.js","components/SearchActions/SearchActions.js","components/App/App.js","serviceWorker.js","index.js"],"names":["getCookie","name","value","RegExp","exec","document","cookie","unescape","CLIENT_ID","CLIENT_SECRET","AUTHORIZATION_CODE","window","location","href","match","uriRedirect","redirectUrl","concat","accessToken","Foursquare","getAccessToken","searchParams","getTokenUrl","join","fetch","mode","then","results","ok","json","token","access_token","findPlaces","latitude","longitude","recommended","arguments","length","undefined","push","this","searchUrl","jsonData","response","groups","map","recommendedGroup","items","item","venue","category","categories","find","primary","iconUrl","icon","prefix","suffix","process","label","shortName","distance","mapURL","lat","lng","reason","reasons","type","id","address","summary","flat","catch","error","console","VenueItem","props","goToMap","_props$venue","react_default","a","createElement","className","onClick","src","alt","FakeVenueItem","EmptyVenuesList","VenuesList","venues","recommendedVenues","nearbyVenues","venuesType","isLoading","Object","toConsumableArray","Array","idx","Place_FakeVenueItem","key","Place_VenueItem","PlacesList_EmptyVenuesList","SearchActions","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentPosition","bind","assertThisInitialized","prevProps","prevState","_this2","setState","success","position","coords","log","navigator","geolocation","getCurrentPosition","mapUrl","open","SearchActions_SearchActions_SearchActions","PlacesList_VenuesList","Component","Boolean","hostname","ReactDOM","render","components_App_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edd4aed3.chunk.js","sourcesContent":["export const getLocation = (success, error) => {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n            success(position)\n        }, function() {\n            error()\n        })\n    }\n    else {\n        error()\n    }\n}\n\nexport const getCookie = (name) => {\n    const re = new RegExp(name + \"=([^;]+)\");\n    const value = re.exec(document.cookie);\n    return (value != null) ? unescape(value[1]) : null;\n}\n","export const CLIENT_ID     = 'SPCGCBMXAIUCDAL1JJHXB0OWEIVIWZGKWYCPFQNPAUDZCNQH'\nexport const CLIENT_SECRET = '2IGTREZMXLUYXYIELZ1P4FEQ0VSMXX5DY2GALBQL0NPD34LC'\nexport const APP_VERSION   = '20191106'\nexport const AUTHORIZATION_CODE = window.location.href.match(/code=([^&]*)/)\n","import {getCookie} from './Helpers.js';\nimport {CLIENT_ID, CLIENT_SECRET, APP_VERSION, AUTHORIZATION_CODE} from '../config.js'\n\nlet uriRedirect     = process.env.NODE_ENV === 'development'\n                        ? 'http://localhost:3000/'\n                        : 'https://alinawww.github.io/foursquareApp/'\n\nconst redirectUrl   = `https://foursquare.com/oauth2/authenticate?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${uriRedirect}/`\nconst accessToken   = getCookie('accessToken')\n\nconst Foursquare = {\n    getAccessToken() {\n        if (AUTHORIZATION_CODE) {\n            const searchParams = [\n                `client_id=${CLIENT_ID}`,\n                `client_secret=${CLIENT_SECRET}`,\n                `grant_type=authorization_code`,\n                `redirect_uri=${uriRedirect}`,\n                `code=${AUTHORIZATION_CODE[1]}`\n            ]\n            const getTokenUrl = `https://foursquare.com/oauth2/access_token?${searchParams.join('&')}`\n            fetch(getTokenUrl, {mode: 'cors'})\n                .then(results => {\n                    if (results.ok) {\n                        return results.json()\n                    }\n                }).then(token => {\n                    document.cookie = `accessToken=${token.access_token}`\n                })\n        }\n        else {\n            // If there's no access code, redirect user to Authorization screen\n            window.location = redirectUrl\n        }\n        return accessToken\n    },\n\n    findPlaces(latitude, longitude, recommended=false) {\n        const searchParams = [\n            `ll=${latitude},${longitude}`,\n            'limit=20',\n            `client_id=${CLIENT_ID}`,\n            `client_secret=${CLIENT_SECRET}`,\n            `v=${APP_VERSION}`\n        ]\n        if (recommended) {\n            if (accessToken) {\n                searchParams.push(`accessToken=${accessToken}`)\n            }\n            else {\n                this.getAccessToken()\n            }\n        }\n        const searchUrl = `https://api.foursquare.com/v2/venues/explore?${searchParams.join('&')}`\n\n        return fetch(searchUrl)\n            .then(results => results.json())\n            .then(jsonData => {\n                if (!jsonData.response) return []\n                const groupedVenues = jsonData.response.groups.map( recommendedGroup => {\n                        return recommendedGroup.items.map( item => {\n                            const venue = item.venue\n                            const location = venue.location\n                            const category = venue.categories.find(category => category.primary)\n                            const iconUrl = category ? `${category.icon.prefix}64${category.icon.suffix}` : `${process.env.PUBLIC_URL}/assets/default_icon.svg`\n                            const label = category ? `${category.shortName}` : ''\n                            const distance = location.distance\n                            const mapURL = `http://www.google.com/maps/place/${location.lat},${location.lng}`\n                            const reason = item.reasons.items.find(reason => reason.type === 'general')\n                            return {\n                                id: venue.id,\n                                name: venue.name,\n                                address: location.address,\n                                reason: reason.summary,\n                                label,\n                                iconUrl,\n                                distance,\n                                mapURL,\n                            }\n                        })\n                    }\n                )\n                return groupedVenues.flat()\n            })\n            .catch(error => {\n                console.error('Error when getting the venues information:', error)\n            })\n    }\n}\n\nexport default Foursquare\n","import React from 'react';\nimport './Place.css';\n\nexport const VenueItem = (props) => {\n    const {goToMap} = props\n    const {iconUrl, address, name, label, distance, mapURL, reason} = props.venue\n    return (\n        <div className=\"venues__item\" onClick={() => goToMap(mapURL)}>\n            <div className=\"venues__item-icon\">\n                <img src={iconUrl} alt=\"venue icon\"/>\n            </div>\n            <div className=\"venues__item-content\">\n                { reason && <span className=\"venue__item-label venue__item-label--sup\">{reason}</span> }\n                <h2 className=\"venues__item-title\">{name}</h2>\n                { label && <p className=\"venue__item-label\">{label}</p> }\n                <div>\n                    { address && <span className=\"venue__item-address\">{address}</span> }{address && distance && ', '}\n                    { distance && <span className=\"venues__item-distance\">{distance} meters away</span> }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const FakeVenueItem = () => {\n    return (\n        <div className=\"venues__item\">\n            <div className=\"venues__item-icon\"><span className='fake-element fake-element--icon'>&nbsp;</span></div>\n            <div className=\"venues__item-content\">\n                <h2 className=\"venues__item-title\"><span className='fake-element fake-element--title'>&nbsp;</span></h2>\n                <p className=\"venue__item-address\"><span className='fake-element fake-element--address'>&nbsp;</span></p>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {VenueItem, FakeVenueItem} from '../Place/Place';\nimport './PlacesList.css';\n\nconst EmptyVenuesList = () => {\n    return (\n        <div className=\"venues-empty\">\n            <h2 className=\"venues-empty__title\">Where to next?</h2>\n            <p className=\"venues-empty__text\">Discover places around your by using the options above</p>\n            <img className=\"venues-empty__image\" src={`${process.env.PUBLIC_URL}/assets/undraw_lost.svg`} alt=\"man looking on a map\"/>\n        </div>\n    )\n}\n\nexport const VenuesList = (props) => {\n    const {recommendedVenues, nearbyVenues, venuesType, isLoading, goToMap} = props\n    let venues;\n    if (isLoading || !venuesType.length) {\n        venues = []\n    }\n    else {\n        if (venuesType === 'nearby') {\n            venues = nearbyVenues\n        }\n        else if (venuesType === 'recommended') {\n            venues = recommendedVenues\n        }\n    }\n\n    return (\n        <div className=\"foursquare__venues venues\">\n            {isLoading && [...Array(3)].map((item, idx) => {\n                return <FakeVenueItem key={idx} isLoading={isLoading}/>\n                })\n            }\n            {venues.length > 0 && venues.map(venue => {\n                return <VenueItem key={venue.id} venue={venue} goToMap={goToMap}/>\n                })\n            }\n            {venues.length === 0 && !isLoading && <EmptyVenuesList />}\n        </div>\n    )\n}\n","import React from 'react';\nimport './SearchActions.css';\n\nexport const SearchActions = (props) => {\n    const {findPlaces} = props\n    return (\n        <div className=\"intro__actions\">\n            <button className=\"intro__button\" onClick={(recommended) => findPlaces(recommended=false)}>Show me places near me</button>\n            <button className=\"intro__button\" onClick={(recommended) => findPlaces(recommended=true)}>Show me recommended</button>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Foursquare from '../../util/Foursquare.js';\nimport {getCookie, getLocation} from '../../util/Helpers.js';\nimport {VenuesList} from '../PlacesList/PlacesList';\nimport {SearchActions} from '../SearchActions/SearchActions';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nearbyVenues: [],\n            recommendedVenues: [],\n            isLoading: false,\n            currentPosition: {\n                lat: 0,\n                lng: 0\n            },\n            venuesType: '' // can be 'nearby' or 'recommended'\n        };\n\n        this.findPlaces = this.findPlaces.bind(this)\n        this.goToMap = this.goToMap.bind(this)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.currentPosition.lat !== this.state.currentPosition.lat ||\n            prevState.currentPosition.lng !== this.state.currentPosition.lng) {\n            this.findPlaces(this.state.venuesType === 'recommended')\n        }\n    }\n\n    findPlaces(recommended) {\n        this.setState({isLoading: true})\n        const latitude = getCookie('latitude')\n        const longitude = getCookie('longitude')\n\n        if (latitude === null || longitude === null) {\n            return getLocation(position => {\n                document.cookie = `latitude=${position.coords.latitude}`\n                document.cookie = `longitude=${position.coords.longitude}`\n                const coords = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                }\n                this.setState({currentPosition: coords})\n            }, () => {\n                console.log('Error: Your location needs to be allowed for this service.');\n                this.setState({isLoading: false})\n            })\n        }\n        Foursquare.findPlaces(latitude, longitude, recommended).then(venues => {\n            recommended\n                ? this.setState({\n                    recommendedVenues: venues,\n                    venuesType: 'recommended',\n                    isLoading: false\n                    })\n                : this.setState({\n                    nearbyVenues: venues,\n                    venuesType: 'nearby',\n                    isLoading: false\n                    })\n        })\n    }\n\n    goToMap(mapUrl) {\n        window.open(mapUrl, '_blank');\n    }\n\n    render() {\n        return (\n            <div className=\"foursquare\">\n                <div className=\"foursquare__intro intro\">\n                    <h1 className=\"intro__title\">places.</h1>\n                    <SearchActions findPlaces={this.findPlaces} />\n                </div>\n                <VenuesList\n                    recommendedVenues={this.state.recommendedVenues}\n                    nearbyVenues={this.state.nearbyVenues}\n                    isLoading={this.state.isLoading}\n                    venuesType={this.state.venuesType}\n                    goToMap={this.goToMap} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}