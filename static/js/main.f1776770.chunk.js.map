{"version":3,"sources":["util/Foursquare.js","util/helpers.js","components/Place/Place.js","components/PlacesList/PlacesList.js","components/SearchActions/SearchActions.js","components/App/App.js","serviceWorker.js","index.js"],"names":["CLIENT_ID","CLIENT_SECRET","redirectUrl","concat","latitude","window","localStorage","getItem","longitude","accessToken","authorizationCode","location","href","match","Foursquare","getAccessToken","getTokenUrl","fetch","mode","then","results","console","log","ok","json","token","setItem","access_token","findPlaces","success","error","recommended","arguments","length","undefined","position","coords","navigator","geolocation","getCurrentPosition","searchParams","push","this","searchUrl","join","jsonData","response","venues","map","venue","category","categories","iconUrl","icon","prefix","suffix","id","name","address","catch","VenueItem","props","_props$venue","react_default","a","createElement","className","src","alt","FakeVenueItem","EmptyVenuesList","process","VenuesList","recommendedVenues","nearbyVenues","venuesType","isLoading","Object","toConsumableArray","Array","item","idx","Place_FakeVenueItem","key","Place_VenueItem","PlacesList_EmptyVenuesList","SearchActions","onClick","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","code","bind","assertThisInitialized","_this2","setState","SearchActions_SearchActions_SearchActions","PlacesList_VenuesList","Component","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1776770.chunk.js","sourcesContent":["import {getLocation} from './helpers';\n\nconst CLIENT_ID = 'SPCGCBMXAIUCDAL1JJHXB0OWEIVIWZGKWYCPFQNPAUDZCNQH'\nconst CLIENT_SECRET = '2IGTREZMXLUYXYIELZ1P4FEQ0VSMXX5DY2GALBQL0NPD34LC'\n// const redirectUri = 'https://alinawww.github.io/testgp/'\nconst redirectUri = 'http://localhost:3000/'\nconst redirectUrl = `https://foursquare.com/oauth2/authenticate?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${redirectUri}/`\n\nconst latitude = window.localStorage.getItem('latitude')\nconst longitude = window.localStorage.getItem('longitude')\nconst accessToken = window.localStorage.getItem('accessToken')\nconst authorizationCode = window.location.href.match(/code=([^&]*)/)\n\nconst Foursquare = {\n    getAccessToken() {\n        if (authorizationCode) {\n            const getTokenUrl = `https://foursquare.com/oauth2/access_token?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=authorization_code&redirect_uri=${redirectUri}&code=${authorizationCode[1]}`\n            fetch(getTokenUrl, {mode: 'cors'})\n                .then(results => {\n                    console.log('results', results);\n                    if (results.ok) {\n                        return results.json()\n                    }\n                }).then(token => {\n                    console.log(token);\n                    window.localStorage.setItem('accessToken', token.access_token)\n                })\n        }\n        else {\n            // If there's no access code, redirect user to Authorization screen\n            window.location = redirectUrl\n        }\n        return accessToken\n    },\n\n\n    findPlaces(recommended=false) {\n        if (!latitude || !longitude) {\n            return getLocation(position => {\n                window.localStorage.setItem('latitude', position.coords.latitude)\n                window.localStorage.setItem('longitude', position.coords.longitude)\n            })\n        }\n        const searchParams = [\n            `ll=${latitude},${longitude}`,\n            `client_id=${CLIENT_ID}`,\n            `client_secret=${CLIENT_SECRET}`,\n            `v=20191106`\n        ]\n        if (recommended) {\n            if (accessToken) {\n                searchParams.push(`oauth_token=${accessToken}`)\n            }\n            else {\n                this.getAccessToken()\n            }\n        }\n        const searchUrl = `https://api.foursquare.com/v2/venues/search?${searchParams.join('&')}`\n\n        return fetch(searchUrl)\n            .then(results => results.json())\n            .then(jsonData => {\n                if (!jsonData.response) return []\n                return jsonData.response.venues.map(\n                    venue => {\n                        const category = venue.categories[0] // the venues usually have only one cat\n                        const iconUrl = category ? `${category.icon.prefix}64${category.icon.suffix}` : ''\n                        return {\n                            id: venue.id,\n                            name: venue.name,\n                            address: venue.location.address,\n                            iconUrl,\n                        }\n                    }\n                )\n            })\n            .catch(error => {\n                console.error('Error when getting the venues information:', error)\n        })\n    }\n}\n\nexport default Foursquare\n","export function getLocation(success, error) {\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n            success(position);\n        }, function() {\n            error();\n            console.log('Error: The Geolocation service failed.');\n        });\n    }\n    else {\n        console.log('Error: Your browser doesn\\'t support geolocation.');\n    }\n}\n","import React from 'react';\nimport './Place.css';\n\nexport const VenueItem = (props) => {\n    const {iconUrl, address, name} = props.venue\n    return (\n        <div className=\"venues__item\">\n            <div className=\"venues__item-icon\">\n                <img src={iconUrl} alt=\"venue icon\"/>\n            </div>\n            <div className=\"venues__item-content\">\n                <h2 className=\"venues__item-title\">{name}</h2>\n                { address && <p className=\"venue__item-address\">{address}</p> }\n            </div>\n        </div>\n    )\n}\n\nexport const FakeVenueItem = () => {\n    return (\n        <div className=\"venues__item\">\n            <div className=\"venues__item-icon\"><span className='fake-element fake-element--icon'>&nbsp;</span></div>\n            <div className=\"venues__item-content\">\n                <h2 className=\"venues__item-title\"><span className='fake-element fake-element--title'>&nbsp;</span></h2>\n                <p className=\"venue__item-address\"><span className='fake-element fake-element--address'>&nbsp;</span></p>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {VenueItem, FakeVenueItem} from '../Place/Place';\nimport './PlacesList.css';\n\nconst EmptyVenuesList = () => {\n    return (\n        <div className=\"venues-empty\">\n            <h2 className=\"venues-empty__title\">Where to next?</h2>\n            <p className=\"venues-empty__text\">Discover places around your by using the options above</p>\n            <img className=\"venues-empty__image\" src={`${process.env.PUBLIC_URL}/assets/undraw_lost.svg`} alt=\"woman\"/>\n        </div>\n    )\n}\n\nexport const VenuesList = (props) => {\n    const {recommendedVenues, nearbyVenues, venuesType, isLoading} = props\n    let venues;\n    if (isLoading || !venuesType.length) {\n        venues = []\n    }\n    else {\n        if (venuesType === 'nearby') {\n            venues = nearbyVenues\n        }\n        else if (venuesType === 'recommended') {\n            venues = recommendedVenues\n        }\n    }\n\n    return (\n        <div className=\"foursquare__venues venues\">\n            {isLoading && [...Array(3)].map((item, idx) => {\n                return <FakeVenueItem key={idx} isLoading={isLoading}/>\n                })\n            }\n            {venues.length > 0 && venues.map(venue => {\n                return <VenueItem key={venue.id} venue={venue} />\n                })\n            }\n            {venues.length === 0 && !isLoading && <EmptyVenuesList />}\n        </div>\n    )\n}\n","import React from 'react';\nimport './SearchActions.css';\n\nexport const SearchActions = (props) => {\n    const {findPlaces} = props\n    return (\n        <div className=\"intro__actions\">\n            <button className=\"intro__button\" onClick={(recommended) => findPlaces(recommended=false)}>Show me places near me</button>\n            <button className=\"intro__button\" onClick={(recommended) => findPlaces(recommended=true)}>Show me recommended</button>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Foursquare from '../../util/Foursquare.js';\nimport {VenuesList} from '../PlacesList/PlacesList';\nimport {SearchActions} from '../SearchActions/SearchActions';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nearbyVenues: [],\n            recommendedVenues: [],\n            error: null,\n            isLoading: false,\n            code: '',\n            venuesType: '' // can be 'nearby' or 'recommended'\n        };\n\n        this.findPlaces = this.findPlaces.bind(this)\n    }\n\n    findPlaces(recommended) {\n        this.setState({isLoading: true})\n        Foursquare.findPlaces(recommended).then(venues => {\n            recommended\n                ? this.setState({recommendedVenues: venues, venuesType: 'recommended', isLoading: false})\n                : this.setState({nearbyVenues: venues, venuesType: 'nearby', isLoading: false})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"foursquare\">\n                <div className=\"foursquare__intro intro\">\n                    <h1 className=\"intro__title\">places.</h1>\n                    <SearchActions findPlaces={this.findPlaces} />\n                </div>\n                <VenuesList\n                    recommendedVenues={this.state.recommendedVenues}\n                    nearbyVenues={this.state.nearbyVenues}\n                    isLoading={this.state.isLoading}\n                    venuesType={this.state.venuesType} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}